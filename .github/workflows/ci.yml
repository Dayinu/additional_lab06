name: CMake Build
on: [push, pull_request]
jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        # Устанавливаем MinGW и добавляем его в PATH
        choco install mingw -y --version 13.1.0 --no-progress
        $mingwPath = "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin"
        echo "$mingwPath" >> $env:GITHUB_PATH
        
        # Устанавливаем CMake
        choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System' --no-progress
        
        # Устанавливаем SFML 2.6.1 (совместим с MinGW 13.1.0)
        if (-not (Test-Path C:/SFML-2.6.1)) {
            Invoke-WebRequest "https://github.com/SFML/SFML/releases/download/2.6.1/SFML-2.6.1-windows-gcc-13.1.0-mingw-64-bit.zip" -OutFile "sfml.zip"
            Expand-Archive sfml.zip -DestinationPath C:/ -Force
        }
        echo "C:\SFML-2.6.1\bin" >> $env:GITHUB_PATH
    
    - name: Configure CMake
      run: cmake -S . -B build -G "MinGW Makefiles" -DSFML_DIR="C:/SFML-2.6.1/lib/cmake/SFML"
        
    - name: Build
      run: cmake --build build --config Release --parallel
        
    - name: Find and copy MinGW DLLs
      run: |
        # Ищем MinGW DLLs в нескольких возможных местах
        $possiblePaths = @(
            "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin",
            "C:\tools\mingw64\bin",
            "C:\msys64\mingw64\bin"
        )
        
        $foundPath = $null
        foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
                $foundPath = $path
                break
            }
        }
        
        if (-not $foundPath) {
            Write-Host "Не удалось найти папку MinGW bin, ищем рекурсивно..."
            $foundPath = Get-ChildItem -Path "C:\" -Recurse -Directory -Filter "bin" -ErrorAction SilentlyContinue |
                        Where-Object { $_.FullName -like "*mingw*" -and (Test-Path "$($_.FullName)\libgcc_s_seh-1.dll") } |
                        Select-Object -First 1 -ExpandProperty FullName
        }
        
        if (-not $foundPath) {
            Write-Error "Не удалось найти папку MinGW bin с необходимыми DLL"
            exit 1
        }
        
        Write-Host "Найден путь к MinGW: $foundPath"
        
        $essentialDlls = @(
            "libgcc_s_seh-1.dll", 
            "libstdc++-6.dll", 
            "libwinpthread-1.dll"
        )
        
        foreach ($dll in $essentialDlls) {
            $dllPath = Join-Path $foundPath $dll
            if (Test-Path $dllPath) {
                Copy-Item $dllPath -Destination build -ErrorAction Stop
                Write-Host "Скопировано: $dll"
            } else {
                Write-Error "DLL не найдена: $dllPath"
                exit 1
            }
        }
        
        # Копируем системные и SFML DLL
        Copy-Item "C:\Windows\System32\vcruntime140.dll" -Destination build
        Copy-Item "C:/SFML-2.6.1/bin/*.dll" -Destination build/ -Force
        
    - name: Install OpenAL
      run: |
        $openalPath = "build/openal32.dll"
        if (-not (Test-Path $openalPath)) {
            Invoke-WebRequest "https://github.com/kcat/openal-soft/releases/download/1.23.1/openal-soft-1.23.1-bin.zip" -OutFile "openal.zip"
            Expand-Archive openal.zip -DestinationPath openal_tmp -Force
            $dll = Get-ChildItem openal_tmp -Recurse -Filter "soft_oal.dll" | Select-Object -First 1
            Copy-Item $dll.FullName -Destination $openalPath -Force
            Remove-Item openal.zip, openal_tmp -Recurse -Force
        }
        
    - name: Verify dependencies
      run: |
        cd build
        Write-Host "Содержимое папки build:"
        Get-ChildItem
        
        $requiredDlls = @(
            "sfml-graphics-2.dll", 
            "sfml-window-2.dll", 
            "sfml-system-2.dll", 
            "sfml-audio-2.dll",
            "openal32.dll", 
            "libgcc_s_seh-1.dll", 
            "libstdc++-6.dll", 
            "vcruntime140.dll"
        )
        
        $missing = @()
        foreach ($dll in $requiredDlls) {
            if (-not (Test-Path $dll)) {
                $missing += $dll
            }
        }
        
        if ($missing.Count -gt 0) {
            Write-Error "Отсутствуют DLL: $($missing -join ', ')"
            exit 1
        }
        
    - name: Copy resources
      run: |
        Copy-Item images -Destination build/images -Recurse -Force
        
    - name: Run executable
      run: |
        cd build
        Write-Host "Запуск arkanoid.exe с текущим PATH: $env:PATH"
        .\arkanoid.exe
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Приложение завершилось с ошибкой $LASTEXITCODE"
            exit $LASTEXITCODE
        }
