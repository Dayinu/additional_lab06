name: CMake Build
on: [push, pull_request]
jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        choco install mingw -y --version 12.2.0 --no-progress
        choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System' --no-progress
        
        if (-not (Test-Path C:/SFML-2.5.1)) {
            Invoke-WebRequest "https://github.com/SFML/SFML/releases/download/2.5.1/SFML-2.5.1-windows-gcc-7.3.0-mingw-64-bit.zip" -OutFile "sfml.zip"
            Expand-Archive sfml.zip -DestinationPath C:/ -Force
        }
        echo "C:\SFML-2.5.1\bin" >> $env:GITHUB_PATH
    
    - name: Configure CMake
      run: cmake -S . -B build -G "MinGW Makefiles" -DSFML_DIR="C:/SFML-2.5.1/lib/cmake/SFML"
        
    - name: Build
      run: cmake --build build --config Release --parallel
        
    - name: Copy essential DLLs
      run: |
        $mingwPath = "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin"
        $essentialDlls = @(
            "libgcc_s_seh-1.dll", 
            "libstdc++-6.dll", 
            "libwinpthread-1.dll"
        )
        foreach ($dll in $essentialDlls) {
            Copy-Item "$mingwPath\$dll" -Destination build -ErrorAction Stop
        }
        
        # Копируем vcruntime из системной директории
        $vcruntimePath = "C:\Windows\System32\vcruntime140.dll"
        if (Test-Path $vcruntimePath) {
            Copy-Item $vcruntimePath -Destination build
        } else {
            Write-Error "vcruntime140.dll not found in System32"
            exit 1
        }
        
        Copy-Item "C:/SFML-2.5.1/bin/*.dll" -Destination build/ -Force
        
    - name: Install OpenAL
      run: |
        $openalPath = "C:\openal32.dll"
        if (-not (Test-Path $openalPath)) {
            Invoke-WebRequest "https://github.com/kcat/openal-soft/releases/download/1.23.1/openal-soft-1.23.1-bin.zip" -OutFile "openal.zip"
            Expand-Archive openal.zip -DestinationPath openal_tmp -Force
            $dll = Get-ChildItem openal_tmp -Recurse -Filter "soft_oal.dll" | Select-Object -First 1
            Copy-Item $dll.FullName -Destination $openalPath -Force
            Remove-Item openal.zip, openal_tmp -Recurse -Force
        }
        Copy-Item $openalPath -Destination build/openal32.dll -Force
        
    - name: Verify dependencies
      run: |
        cd build
        
        # Проверка исполняемого файла
        if (-not (Test-Path arkanoid.exe)) {
            Write-Error "Executable file arkanoid.exe not found!"
            exit 1
        }
        
        # Проверка ресурсов
        if (-not (Test-Path images)) {
            Write-Error "Resource directory images not found!"
            exit 1
        }
        
        # Проверка обязательных DLL
        $requiredDlls = @(
            "sfml-graphics-2.dll", 
            "sfml-window-2.dll", 
            "sfml-system-2.dll", 
            "sfml-audio-2.dll",
            "openal32.dll", 
            "libgcc_s_seh-1.dll", 
            "libstdc++-6.dll", 
            "vcruntime140.dll"
        )
        
        $missing = @()
        foreach ($dll in $requiredDlls) {
            if (-not (Test-Path $dll)) {
                $missing += $dll
            }
        }
        
        if ($missing.Count -gt 0) {
            Write-Error "Missing DLLs: $($missing -join ', ')"
            Write-Host "DLLs present in build directory:"
            Get-ChildItem *.dll | Format-Table Name
            exit 1
        }
        
        Write-Host "All dependencies verified successfully"
        
    - name: Copy resources
      run: |
        Copy-Item images -Destination build/images -Recurse -Force
        
    - name: Run executable
      run: |
        cd build
        
        # Запуск с таймаутом
        $process = Start-Process .\arkanoid.exe -NoNewWindow -PassThru
        $process | Wait-Process -Timeout 15 -ErrorAction SilentlyContinue
        
        if (-not $process.HasExited) {
            $process | Stop-Process -Force
            Write-Error "Application timed out after 15 seconds"
            exit 1
        }
        
        if ($process.ExitCode -ne 0) {
            Write-Error "Application failed with exit code $($process.ExitCode)"
            exit $process.ExitCode
        }
        
        Write-Host "Application ran successfully!"
