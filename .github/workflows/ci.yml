name: CMake Build
on: [push, pull_request]
jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        choco install mingw -y --version 13.1.0 --no-progress
        choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System' --no-progress
        
        if (-not (Test-Path C:/SFML-2.6.1)) {
            Invoke-WebRequest "https://github.com/SFML/SFML/releases/download/2.6.1/SFML-2.6.1-windows-gcc-13.1.0-mingw-64-bit.zip" -OutFile "sfml.zip"
            Expand-Archive sfml.zip -DestinationPath C:/ -Force
        }
        echo "C:\SFML-2.6.1\bin" >> $env:GITHUB_PATH
    
    - name: Configure CMake
      run: cmake -S . -B build -G "MinGW Makefiles" -DSFML_DIR="C:/SFML-2.6.1/lib/cmake/SFML"
        
    - name: Build
      run: cmake --build build --config Release --parallel
        
    - name: Copy essential DLLs
      run: |
        $mingwRoot = "C:\ProgramData\chocolatey\lib\mingw\tools\install"
        $mingwPath = Get-ChildItem -Path $mingwRoot -Recurse -Directory -Filter "bin" | 
                    Where-Object { $_.FullName -like "*mingw64*bin" } | 
                    Select-Object -First 1 -ExpandProperty FullName
        
        if (-not $mingwPath) {
            Write-Error "Не удалось найти папку bin MinGW"
            exit 1
        }
        
        Write-Host "Используемый путь MinGW: $mingwPath"
        
        $essentialDlls = @(
            "libgcc_s_seh-1.dll", 
            "libstdc++-6.dll", 
            "libwinpthread-1.dll"
        )
        
        foreach ($dll in $essentialDlls) {
            $dllPath = Join-Path $mingwPath $dll
            if (Test-Path $dllPath) {
                Copy-Item $dllPath -Destination build -ErrorAction Stop
            } else {
                Write-Error "DLL не найдена: $dllPath"
                exit 1
            }
        }
        
        Copy-Item "C:\Windows\System32\vcruntime140.dll" -Destination build
        Copy-Item "C:/SFML-2.6.1/bin/*.dll" -Destination build/ -Force
        
        Write-Host "Скопированные DLL:"
        Get-ChildItem build/*.dll | Format-Table Name
    
    - name: Install OpenAL
      run: |
        $openalPath = "C:\openal32.dll"
        if (-not (Test-Path $openalPath)) {
            Invoke-WebRequest "https://github.com/kcat/openal-soft/releases/download/1.23.1/openal-soft-1.23.1-bin.zip" -OutFile "openal.zip"
            Expand-Archive openal.zip -DestinationPath openal_tmp -Force
            $dll = Get-ChildItem openal_tmp -Recurse -Filter "soft_oal.dll" | Select-Object -First 1
            Copy-Item $dll.FullName -Destination $openalPath -Force
            Remove-Item openal.zip, openal_tmp -Recurse -Force
        }
        Copy-Item $openalPath -Destination build/openal32.dll -Force
        
    - name: Verify dependencies
      run: |
        cd build
        Write-Host "Содержимое папки build:"
        Get-ChildItem
        
        $requiredDlls = @(
            "sfml-graphics-2.dll", 
            "sfml-window-2.dll", 
            "sfml-system-2.dll", 
            "sfml-audio-2.dll",
            "openal32.dll", 
            "libgcc_s_seh-1.dll", 
            "libstdc++-6.dll", 
            "vcruntime140.dll"
        )
        
        $missing = @()
        foreach ($dll in $requiredDlls) {
            if (-not (Test-Path $dll)) {
                $missing += $dll
            }
        }
        
        if ($missing.Count -gt 0) {
            Write-Error "Отсутствуют DLL: $($missing -join ', ')"
            exit 1
        }
        
    - name: Copy resources
      run: |
        Copy-Item images -Destination build/images -Recurse -Force
        
    - name: Run executable
      run: |
        cd build
        Write-Host "Запуск arkanoid.exe"
        .\arkanoid.exe
