name: CMake Build
on: [push, pull_request]
jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Установка MSYS2 и MinGW
      run: |
        # Устанавливаем MSYS2 (включает MinGW)
        choco install msys2 -y --params="/NoUpdate"
        $msysPath = "C:\msys64"
        echo "$msysPath\mingw64\bin" >> $env:GITHUB_PATH
        
        # Обновляем пакеты MSYS2 и устанавливаем MinGW
        & "$msysPath\msys2_shell.cmd" -defterm -no-start -mingw64 -c "pacman -Syu --noconfirm"
        & "$msysPath\msys2_shell.cmd" -defterm -no-start -mingw64 -c "pacman -S --noconfirm mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake"
    
    - name: Установка SFML
      run: |
        if (-not (Test-Path C:/SFML-2.6.1)) {
            Invoke-WebRequest "https://github.com/SFML/SFML/releases/download/2.6.1/SFML-2.6.1-windows-gcc-13.1.0-mingw-64-bit.zip" -OutFile "sfml.zip"
            Expand-Archive sfml.zip -DestinationPath C:/ -Force
        }
        echo "C:\SFML-2.6.1\bin" >> $env:GITHUB_PATH
    
    - name: Настройка CMake
      run: |
        cmake -S . -B build -G "MinGW Makefiles" -DSFML_DIR="C:/SFML-2.6.1/lib/cmake/SFML"
        
    - name: Сборка проекта
      run: |
        cmake --build build --config Release --parallel
        
    - name: Копирование необходимых DLL
      run: |
        $mingwPath = "C:\msys64\mingw64\bin"
        
        # Основные DLL MinGW
        $mingwDlls = @(
            "libgcc_s_seh-1.dll",
            "libstdc++-6.dll",
            "libwinpthread-1.dll"
        )
        
        foreach ($dll in $mingwDlls) {
            $dllPath = Join-Path $mingwPath $dll
            if (Test-Path $dllPath) {
                Copy-Item $dllPath -Destination build
                Write-Host "Скопировано: $dll"
            } else {
                Write-Host "Предупреждение: $dll не найдена, попытка установить..."
                & "C:\msys64\msys2_shell.cmd" -defterm -no-start -mingw64 -c "pacman -S --noconfirm mingw-w64-x86_64-gcc-libs"
                if (Test-Path $dllPath) {
                    Copy-Item $dllPath -Destination build
                } else {
                    Write-Error "Не удалось найти $dll после установки gcc-libs"
                    exit 1
                }
            }
        }
        
        # Системные DLL
        Copy-Item "C:\Windows\System32\vcruntime140.dll" -Destination build
        
        # DLL SFML
        Copy-Item "C:\SFML-2.6.1\bin\*.dll" -Destination build -Force
        
        # OpenAL (если нужно)
        if (-not (Test-Path "build\openal32.dll")) {
            Copy-Item "C:\SFML-2.6.1\bin\openal32.dll" -Destination build -ErrorAction SilentlyContinue
        }
    
    - name: Проверка зависимостей
      run: |
        cd build
        Write-Host "Содержимое папки build:"
        Get-ChildItem
        
        $requiredDlls = @(
            "sfml-graphics-2.dll",
            "sfml-window-2.dll",
            "sfml-system-2.dll",
            "sfml-audio-2.dll",
            "libgcc_s_seh-1.dll",
            "libstdc++-6.dll",
            "libwinpthread-1.dll",
            "vcruntime140.dll"
        )
        
        $missing = @()
        foreach ($dll in $requiredDlls) {
            if (-not (Test-Path $dll)) {
                $missing += $dll
            }
        }
        
        if ($missing.Count -gt 0) {
            Write-Error "Отсутствуют DLL: $($missing -join ', ')"
            exit 1
        }
        
    - name: Копирование ресурсов
      run: |
        Copy-Item images -Destination build/images -Recurse -Force
        
    - name: Запуск приложения
      run: |
        cd build
        Write-Host "Запуск arkanoid.exe..."
        .\arkanoid.exe
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Приложение завершилось с ошибкой $LASTEXITCODE"
            exit $LASTEXITCODE
        }
        Write-Host "Приложение успешно выполнено!"
