name: CMake Build
on: [push, pull_request]
jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 10  # Prevent hanging
    steps:
    - uses: actions/checkout@v4
    
    - name: Install MSYS2 and MinGW
      run: |
        # Install minimal MSYS2 with Mingw-w64
        choco install msys2 --params="/InstallDir:C:\msys64 /NoUpdate" -y --no-progress
        echo "C:\msys64\mingw64\bin" >> $env:GITHUB_PATH
        
        # Quick install essential packages (no full update)
        & "C:\msys64\usr\bin\bash" -lc "pacman -Sy --noconfirm --needed mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake"
    
    - name: Install SFML (cached)
      id: sfml
      run: |
        $sfmlPath = "C:\SFML-2.6.1"
        if (-not (Test-Path $sfmlPath)) {
            Invoke-WebRequest "https://github.com/SFML/SFML/releases/download/2.6.1/SFML-2.6.1-windows-gcc-13.1.0-mingw-64-bit.zip" -OutFile "sfml.zip"
            Expand-Archive sfml.zip -DestinationPath C:\ -Force
            Remove-Item sfml.zip
        }
        echo "SFML_DIR=$sfmlPath" >> $env:GITHUB_ENV
        echo "$sfmlPath\bin" >> $env:GITHUB_PATH
    
    - name: Configure CMake
      run: cmake -S . -B build -G "MinGW Makefiles" -DSFML_DIR="$env:SFML_DIR/lib/cmake/SFML"
        
    - name: Build project
      run: cmake --build build --config Release --parallel 2
        
    - name: Copy runtime dependencies
      run: |
        # MinGW DLLs
        $dlls = @(
            "libgcc_s_seh-1.dll",
            "libstdc++-6.dll",
            "libwinpthread-1.dll"
        )
        
        foreach ($dll in $dlls) {
            Copy-Item "C:\msys64\mingw64\bin\$dll" -Destination build -ErrorAction Stop
        }
        
        # System and SFML DLLs
        Copy-Item "C:\Windows\System32\vcruntime140.dll" -Destination build
        Copy-Item "$env:SFML_DIR\bin\*.dll" -Destination build -Force
    
    - name: Verify dependencies
      run: |
        cd build
        $required = @(
            "sfml-graphics-2.dll", "sfml-window-2.dll", "sfml-system-2.dll", "sfml-audio-2.dll",
            "libgcc_s_seh-1.dll", "libstdc++-6.dll", "libwinpthread-1.dll", "vcruntime140.dll"
        )
        
        $missing = Compare-Object $required (Get-ChildItem *.dll).Name | Where-Object SideIndicator -eq "<="
        if ($missing) {
            Write-Error "Missing DLLs: $($missing.InputObject -join ', ')"
            exit 1
        }
        
    - name: Copy resources
      run: |
        Copy-Item images -Destination build/images -Recurse -Force
        
    - name: Run application
      timeout-minutes: 1  # Prevent hanging
      run: |
        cd build
        Start-Process .\arkanoid.exe -NoNewWindow -Wait
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Application failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
        }
